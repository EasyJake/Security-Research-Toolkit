// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reqlog/reqlog.proto

package reqlog

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HttpRequestLogServiceName is the fully-qualified name of the HttpRequestLogService service.
	HttpRequestLogServiceName = "hetty.reqlog.v1.HttpRequestLogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HttpRequestLogServiceGetHttpRequestLogProcedure is the fully-qualified name of the
	// HttpRequestLogService's GetHttpRequestLog RPC.
	HttpRequestLogServiceGetHttpRequestLogProcedure = "/hetty.reqlog.v1.HttpRequestLogService/GetHttpRequestLog"
	// HttpRequestLogServiceListHttpRequestLogsProcedure is the fully-qualified name of the
	// HttpRequestLogService's ListHttpRequestLogs RPC.
	HttpRequestLogServiceListHttpRequestLogsProcedure = "/hetty.reqlog.v1.HttpRequestLogService/ListHttpRequestLogs"
	// HttpRequestLogServiceClearHttpRequestLogsProcedure is the fully-qualified name of the
	// HttpRequestLogService's ClearHttpRequestLogs RPC.
	HttpRequestLogServiceClearHttpRequestLogsProcedure = "/hetty.reqlog.v1.HttpRequestLogService/ClearHttpRequestLogs"
)

// HttpRequestLogServiceClient is a client for the hetty.reqlog.v1.HttpRequestLogService service.
type HttpRequestLogServiceClient interface {
	GetHttpRequestLog(context.Context, *connect.Request[GetHttpRequestLogRequest]) (*connect.Response[GetHttpRequestLogResponse], error)
	ListHttpRequestLogs(context.Context, *connect.Request[ListHttpRequestLogsRequest]) (*connect.Response[ListHttpRequestLogsResponse], error)
	ClearHttpRequestLogs(context.Context, *connect.Request[ClearHttpRequestLogsRequest]) (*connect.Response[ClearHttpRequestLogsResponse], error)
}

// NewHttpRequestLogServiceClient constructs a client for the hetty.reqlog.v1.HttpRequestLogService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHttpRequestLogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HttpRequestLogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	httpRequestLogServiceMethods := File_reqlog_reqlog_proto.Services().ByName("HttpRequestLogService").Methods()
	return &httpRequestLogServiceClient{
		getHttpRequestLog: connect.NewClient[GetHttpRequestLogRequest, GetHttpRequestLogResponse](
			httpClient,
			baseURL+HttpRequestLogServiceGetHttpRequestLogProcedure,
			connect.WithSchema(httpRequestLogServiceMethods.ByName("GetHttpRequestLog")),
			connect.WithClientOptions(opts...),
		),
		listHttpRequestLogs: connect.NewClient[ListHttpRequestLogsRequest, ListHttpRequestLogsResponse](
			httpClient,
			baseURL+HttpRequestLogServiceListHttpRequestLogsProcedure,
			connect.WithSchema(httpRequestLogServiceMethods.ByName("ListHttpRequestLogs")),
			connect.WithClientOptions(opts...),
		),
		clearHttpRequestLogs: connect.NewClient[ClearHttpRequestLogsRequest, ClearHttpRequestLogsResponse](
			httpClient,
			baseURL+HttpRequestLogServiceClearHttpRequestLogsProcedure,
			connect.WithSchema(httpRequestLogServiceMethods.ByName("ClearHttpRequestLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// httpRequestLogServiceClient implements HttpRequestLogServiceClient.
type httpRequestLogServiceClient struct {
	getHttpRequestLog    *connect.Client[GetHttpRequestLogRequest, GetHttpRequestLogResponse]
	listHttpRequestLogs  *connect.Client[ListHttpRequestLogsRequest, ListHttpRequestLogsResponse]
	clearHttpRequestLogs *connect.Client[ClearHttpRequestLogsRequest, ClearHttpRequestLogsResponse]
}

// GetHttpRequestLog calls hetty.reqlog.v1.HttpRequestLogService.GetHttpRequestLog.
func (c *httpRequestLogServiceClient) GetHttpRequestLog(ctx context.Context, req *connect.Request[GetHttpRequestLogRequest]) (*connect.Response[GetHttpRequestLogResponse], error) {
	return c.getHttpRequestLog.CallUnary(ctx, req)
}

// ListHttpRequestLogs calls hetty.reqlog.v1.HttpRequestLogService.ListHttpRequestLogs.
func (c *httpRequestLogServiceClient) ListHttpRequestLogs(ctx context.Context, req *connect.Request[ListHttpRequestLogsRequest]) (*connect.Response[ListHttpRequestLogsResponse], error) {
	return c.listHttpRequestLogs.CallUnary(ctx, req)
}

// ClearHttpRequestLogs calls hetty.reqlog.v1.HttpRequestLogService.ClearHttpRequestLogs.
func (c *httpRequestLogServiceClient) ClearHttpRequestLogs(ctx context.Context, req *connect.Request[ClearHttpRequestLogsRequest]) (*connect.Response[ClearHttpRequestLogsResponse], error) {
	return c.clearHttpRequestLogs.CallUnary(ctx, req)
}

// HttpRequestLogServiceHandler is an implementation of the hetty.reqlog.v1.HttpRequestLogService
// service.
type HttpRequestLogServiceHandler interface {
	GetHttpRequestLog(context.Context, *connect.Request[GetHttpRequestLogRequest]) (*connect.Response[GetHttpRequestLogResponse], error)
	ListHttpRequestLogs(context.Context, *connect.Request[ListHttpRequestLogsRequest]) (*connect.Response[ListHttpRequestLogsResponse], error)
	ClearHttpRequestLogs(context.Context, *connect.Request[ClearHttpRequestLogsRequest]) (*connect.Response[ClearHttpRequestLogsResponse], error)
}

// NewHttpRequestLogServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHttpRequestLogServiceHandler(svc HttpRequestLogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	httpRequestLogServiceMethods := File_reqlog_reqlog_proto.Services().ByName("HttpRequestLogService").Methods()
	httpRequestLogServiceGetHttpRequestLogHandler := connect.NewUnaryHandler(
		HttpRequestLogServiceGetHttpRequestLogProcedure,
		svc.GetHttpRequestLog,
		connect.WithSchema(httpRequestLogServiceMethods.ByName("GetHttpRequestLog")),
		connect.WithHandlerOptions(opts...),
	)
	httpRequestLogServiceListHttpRequestLogsHandler := connect.NewUnaryHandler(
		HttpRequestLogServiceListHttpRequestLogsProcedure,
		svc.ListHttpRequestLogs,
		connect.WithSchema(httpRequestLogServiceMethods.ByName("ListHttpRequestLogs")),
		connect.WithHandlerOptions(opts...),
	)
	httpRequestLogServiceClearHttpRequestLogsHandler := connect.NewUnaryHandler(
		HttpRequestLogServiceClearHttpRequestLogsProcedure,
		svc.ClearHttpRequestLogs,
		connect.WithSchema(httpRequestLogServiceMethods.ByName("ClearHttpRequestLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hetty.reqlog.v1.HttpRequestLogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HttpRequestLogServiceGetHttpRequestLogProcedure:
			httpRequestLogServiceGetHttpRequestLogHandler.ServeHTTP(w, r)
		case HttpRequestLogServiceListHttpRequestLogsProcedure:
			httpRequestLogServiceListHttpRequestLogsHandler.ServeHTTP(w, r)
		case HttpRequestLogServiceClearHttpRequestLogsProcedure:
			httpRequestLogServiceClearHttpRequestLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHttpRequestLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHttpRequestLogServiceHandler struct{}

func (UnimplementedHttpRequestLogServiceHandler) GetHttpRequestLog(context.Context, *connect.Request[GetHttpRequestLogRequest]) (*connect.Response[GetHttpRequestLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.reqlog.v1.HttpRequestLogService.GetHttpRequestLog is not implemented"))
}

func (UnimplementedHttpRequestLogServiceHandler) ListHttpRequestLogs(context.Context, *connect.Request[ListHttpRequestLogsRequest]) (*connect.Response[ListHttpRequestLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.reqlog.v1.HttpRequestLogService.ListHttpRequestLogs is not implemented"))
}

func (UnimplementedHttpRequestLogServiceHandler) ClearHttpRequestLogs(context.Context, *connect.Request[ClearHttpRequestLogsRequest]) (*connect.Response[ClearHttpRequestLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.reqlog.v1.HttpRequestLogService.ClearHttpRequestLogs is not implemented"))
}
