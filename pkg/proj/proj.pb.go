// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: proj/proj.proto

package proj

import (
	reqlog "github.com/dstotijn/hetty/pkg/reqlog"
	scope "github.com/dstotijn/hetty/pkg/scope"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Project struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsActive bool                   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Request log settings
	ReqLogBypassOutOfScope bool `protobuf:"varint,4,opt,name=req_log_bypass_out_of_scope,json=reqLogBypassOutOfScope,proto3" json:"req_log_bypass_out_of_scope,omitempty"`
	// Request logs filter
	ReqLogFilter *reqlog.RequestLogsFilter `protobuf:"bytes,5,opt,name=req_log_filter,json=reqLogFilter,proto3" json:"req_log_filter,omitempty"`
	// Intercept settings
	InterceptRequests           bool   `protobuf:"varint,6,opt,name=intercept_requests,json=interceptRequests,proto3" json:"intercept_requests,omitempty"`
	InterceptResponses          bool   `protobuf:"varint,7,opt,name=intercept_responses,json=interceptResponses,proto3" json:"intercept_responses,omitempty"`
	InterceptRequestFilterExpr  string `protobuf:"bytes,8,opt,name=intercept_request_filter_expr,json=interceptRequestFilterExpr,proto3" json:"intercept_request_filter_expr,omitempty"`
	InterceptResponseFilterExpr string `protobuf:"bytes,9,opt,name=intercept_response_filter_expr,json=interceptResponseFilterExpr,proto3" json:"intercept_response_filter_expr,omitempty"`
	// Sender settings
	SenderOnlyFindInScope bool   `protobuf:"varint,10,opt,name=sender_only_find_in_scope,json=senderOnlyFindInScope,proto3" json:"sender_only_find_in_scope,omitempty"`
	SenderSearchExpr      string `protobuf:"bytes,11,opt,name=sender_search_expr,json=senderSearchExpr,proto3" json:"sender_search_expr,omitempty"`
	// Scope settings
	ScopeRules    []*scope.ScopeRule `protobuf:"bytes,12,rep,name=scope_rules,json=scopeRules,proto3" json:"scope_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_proj_proj_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Project) GetReqLogBypassOutOfScope() bool {
	if x != nil {
		return x.ReqLogBypassOutOfScope
	}
	return false
}

func (x *Project) GetReqLogFilter() *reqlog.RequestLogsFilter {
	if x != nil {
		return x.ReqLogFilter
	}
	return nil
}

func (x *Project) GetInterceptRequests() bool {
	if x != nil {
		return x.InterceptRequests
	}
	return false
}

func (x *Project) GetInterceptResponses() bool {
	if x != nil {
		return x.InterceptResponses
	}
	return false
}

func (x *Project) GetInterceptRequestFilterExpr() string {
	if x != nil {
		return x.InterceptRequestFilterExpr
	}
	return ""
}

func (x *Project) GetInterceptResponseFilterExpr() string {
	if x != nil {
		return x.InterceptResponseFilterExpr
	}
	return ""
}

func (x *Project) GetSenderOnlyFindInScope() bool {
	if x != nil {
		return x.SenderOnlyFindInScope
	}
	return false
}

func (x *Project) GetSenderSearchExpr() string {
	if x != nil {
		return x.SenderSearchExpr
	}
	return ""
}

func (x *Project) GetScopeRules() []*scope.ScopeRule {
	if x != nil {
		return x.ScopeRules
	}
	return nil
}

type CreateProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	mi := &file_proj_proj_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectResponse) Reset() {
	*x = CreateProjectResponse{}
	mi := &file_proj_proj_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectResponse) ProtoMessage() {}

func (x *CreateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{2}
}

func (x *CreateProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type OpenProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenProjectRequest) Reset() {
	*x = OpenProjectRequest{}
	mi := &file_proj_proj_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenProjectRequest) ProtoMessage() {}

func (x *OpenProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenProjectRequest.ProtoReflect.Descriptor instead.
func (*OpenProjectRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{3}
}

func (x *OpenProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type OpenProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenProjectResponse) Reset() {
	*x = OpenProjectResponse{}
	mi := &file_proj_proj_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenProjectResponse) ProtoMessage() {}

func (x *OpenProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenProjectResponse.ProtoReflect.Descriptor instead.
func (*OpenProjectResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{4}
}

func (x *OpenProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type CloseProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseProjectRequest) Reset() {
	*x = CloseProjectRequest{}
	mi := &file_proj_proj_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseProjectRequest) ProtoMessage() {}

func (x *CloseProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseProjectRequest.ProtoReflect.Descriptor instead.
func (*CloseProjectRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{5}
}

type CloseProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseProjectResponse) Reset() {
	*x = CloseProjectResponse{}
	mi := &file_proj_proj_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseProjectResponse) ProtoMessage() {}

func (x *CloseProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseProjectResponse.ProtoReflect.Descriptor instead.
func (*CloseProjectResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{6}
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     string                 `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	mi := &file_proj_proj_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DeleteProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectResponse) Reset() {
	*x = DeleteProjectResponse{}
	mi := &file_proj_proj_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponse) ProtoMessage() {}

func (x *DeleteProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{8}
}

type GetActiveProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveProjectRequest) Reset() {
	*x = GetActiveProjectRequest{}
	mi := &file_proj_proj_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveProjectRequest) ProtoMessage() {}

func (x *GetActiveProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveProjectRequest.ProtoReflect.Descriptor instead.
func (*GetActiveProjectRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{9}
}

type GetActiveProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       *Project               `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActiveProjectResponse) Reset() {
	*x = GetActiveProjectResponse{}
	mi := &file_proj_proj_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveProjectResponse) ProtoMessage() {}

func (x *GetActiveProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveProjectResponse.ProtoReflect.Descriptor instead.
func (*GetActiveProjectResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{10}
}

func (x *GetActiveProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type ListProjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	mi := &file_proj_proj_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{11}
}

type ListProjectsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Projects      []*Project             `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	mi := &file_proj_proj_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{12}
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type UpdateInterceptSettingsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RequestsEnabled    bool                   `protobuf:"varint,1,opt,name=requests_enabled,json=requestsEnabled,proto3" json:"requests_enabled,omitempty"`
	ResponsesEnabled   bool                   `protobuf:"varint,2,opt,name=responses_enabled,json=responsesEnabled,proto3" json:"responses_enabled,omitempty"`
	RequestFilterExpr  string                 `protobuf:"bytes,3,opt,name=request_filter_expr,json=requestFilterExpr,proto3" json:"request_filter_expr,omitempty"`
	ResponseFilterExpr string                 `protobuf:"bytes,4,opt,name=response_filter_expr,json=responseFilterExpr,proto3" json:"response_filter_expr,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateInterceptSettingsRequest) Reset() {
	*x = UpdateInterceptSettingsRequest{}
	mi := &file_proj_proj_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInterceptSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInterceptSettingsRequest) ProtoMessage() {}

func (x *UpdateInterceptSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInterceptSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateInterceptSettingsRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateInterceptSettingsRequest) GetRequestsEnabled() bool {
	if x != nil {
		return x.RequestsEnabled
	}
	return false
}

func (x *UpdateInterceptSettingsRequest) GetResponsesEnabled() bool {
	if x != nil {
		return x.ResponsesEnabled
	}
	return false
}

func (x *UpdateInterceptSettingsRequest) GetRequestFilterExpr() string {
	if x != nil {
		return x.RequestFilterExpr
	}
	return ""
}

func (x *UpdateInterceptSettingsRequest) GetResponseFilterExpr() string {
	if x != nil {
		return x.ResponseFilterExpr
	}
	return ""
}

type UpdateInterceptSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateInterceptSettingsResponse) Reset() {
	*x = UpdateInterceptSettingsResponse{}
	mi := &file_proj_proj_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInterceptSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInterceptSettingsResponse) ProtoMessage() {}

func (x *UpdateInterceptSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInterceptSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateInterceptSettingsResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{14}
}

type SetScopeRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*scope.ScopeRule     `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetScopeRulesRequest) Reset() {
	*x = SetScopeRulesRequest{}
	mi := &file_proj_proj_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetScopeRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScopeRulesRequest) ProtoMessage() {}

func (x *SetScopeRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScopeRulesRequest.ProtoReflect.Descriptor instead.
func (*SetScopeRulesRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{15}
}

func (x *SetScopeRulesRequest) GetRules() []*scope.ScopeRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type SetScopeRulesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetScopeRulesResponse) Reset() {
	*x = SetScopeRulesResponse{}
	mi := &file_proj_proj_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetScopeRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScopeRulesResponse) ProtoMessage() {}

func (x *SetScopeRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScopeRulesResponse.ProtoReflect.Descriptor instead.
func (*SetScopeRulesResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{16}
}

type SetRequestLogsFilterRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Filter        *reqlog.RequestLogsFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRequestLogsFilterRequest) Reset() {
	*x = SetRequestLogsFilterRequest{}
	mi := &file_proj_proj_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRequestLogsFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestLogsFilterRequest) ProtoMessage() {}

func (x *SetRequestLogsFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestLogsFilterRequest.ProtoReflect.Descriptor instead.
func (*SetRequestLogsFilterRequest) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{17}
}

func (x *SetRequestLogsFilterRequest) GetFilter() *reqlog.RequestLogsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SetRequestLogsFilterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRequestLogsFilterResponse) Reset() {
	*x = SetRequestLogsFilterResponse{}
	mi := &file_proj_proj_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRequestLogsFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequestLogsFilterResponse) ProtoMessage() {}

func (x *SetRequestLogsFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proj_proj_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequestLogsFilterResponse.ProtoReflect.Descriptor instead.
func (*SetRequestLogsFilterResponse) Descriptor() ([]byte, []int) {
	return file_proj_proj_proto_rawDescGZIP(), []int{18}
}

var File_proj_proj_proto protoreflect.FileDescriptor

var file_proj_proj_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31,
	0x1a, 0x13, 0x72, 0x65, 0x71, 0x6c, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x71, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x4c,
	0x6f, 0x67, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x74,
	0x74, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0b,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x33, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68,
	0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x15, 0x0a,
	0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x1b, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x65, 0x74, 0x74,
	0x79, 0x2e, 0x72, 0x65, 0x71, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8e, 0x07, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x74, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22,
	0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x74,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x68, 0x65,
	0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22,
	0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x65,
	0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x68, 0x65,
	0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x68, 0x65, 0x74, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x73, 0x74, 0x6f, 0x74, 0x69, 0x6a, 0x6e, 0x2f, 0x68, 0x65,
	0x74, 0x74, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proj_proj_proto_rawDescOnce sync.Once
	file_proj_proj_proto_rawDescData = file_proj_proj_proto_rawDesc
)

func file_proj_proj_proto_rawDescGZIP() []byte {
	file_proj_proj_proto_rawDescOnce.Do(func() {
		file_proj_proj_proto_rawDescData = protoimpl.X.CompressGZIP(file_proj_proj_proto_rawDescData)
	})
	return file_proj_proj_proto_rawDescData
}

var file_proj_proj_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proj_proj_proto_goTypes = []any{
	(*Project)(nil),                         // 0: hetty.proj.v1.Project
	(*CreateProjectRequest)(nil),            // 1: hetty.proj.v1.CreateProjectRequest
	(*CreateProjectResponse)(nil),           // 2: hetty.proj.v1.CreateProjectResponse
	(*OpenProjectRequest)(nil),              // 3: hetty.proj.v1.OpenProjectRequest
	(*OpenProjectResponse)(nil),             // 4: hetty.proj.v1.OpenProjectResponse
	(*CloseProjectRequest)(nil),             // 5: hetty.proj.v1.CloseProjectRequest
	(*CloseProjectResponse)(nil),            // 6: hetty.proj.v1.CloseProjectResponse
	(*DeleteProjectRequest)(nil),            // 7: hetty.proj.v1.DeleteProjectRequest
	(*DeleteProjectResponse)(nil),           // 8: hetty.proj.v1.DeleteProjectResponse
	(*GetActiveProjectRequest)(nil),         // 9: hetty.proj.v1.GetActiveProjectRequest
	(*GetActiveProjectResponse)(nil),        // 10: hetty.proj.v1.GetActiveProjectResponse
	(*ListProjectsRequest)(nil),             // 11: hetty.proj.v1.ListProjectsRequest
	(*ListProjectsResponse)(nil),            // 12: hetty.proj.v1.ListProjectsResponse
	(*UpdateInterceptSettingsRequest)(nil),  // 13: hetty.proj.v1.UpdateInterceptSettingsRequest
	(*UpdateInterceptSettingsResponse)(nil), // 14: hetty.proj.v1.UpdateInterceptSettingsResponse
	(*SetScopeRulesRequest)(nil),            // 15: hetty.proj.v1.SetScopeRulesRequest
	(*SetScopeRulesResponse)(nil),           // 16: hetty.proj.v1.SetScopeRulesResponse
	(*SetRequestLogsFilterRequest)(nil),     // 17: hetty.proj.v1.SetRequestLogsFilterRequest
	(*SetRequestLogsFilterResponse)(nil),    // 18: hetty.proj.v1.SetRequestLogsFilterResponse
	(*reqlog.RequestLogsFilter)(nil),        // 19: hetty.reqlog.v1.RequestLogsFilter
	(*scope.ScopeRule)(nil),                 // 20: hetty.scope.v1.ScopeRule
}
var file_proj_proj_proto_depIdxs = []int32{
	19, // 0: hetty.proj.v1.Project.req_log_filter:type_name -> hetty.reqlog.v1.RequestLogsFilter
	20, // 1: hetty.proj.v1.Project.scope_rules:type_name -> hetty.scope.v1.ScopeRule
	0,  // 2: hetty.proj.v1.CreateProjectResponse.project:type_name -> hetty.proj.v1.Project
	0,  // 3: hetty.proj.v1.OpenProjectResponse.project:type_name -> hetty.proj.v1.Project
	0,  // 4: hetty.proj.v1.GetActiveProjectResponse.project:type_name -> hetty.proj.v1.Project
	0,  // 5: hetty.proj.v1.ListProjectsResponse.projects:type_name -> hetty.proj.v1.Project
	20, // 6: hetty.proj.v1.SetScopeRulesRequest.rules:type_name -> hetty.scope.v1.ScopeRule
	19, // 7: hetty.proj.v1.SetRequestLogsFilterRequest.filter:type_name -> hetty.reqlog.v1.RequestLogsFilter
	1,  // 8: hetty.proj.v1.ProjectService.CreateProject:input_type -> hetty.proj.v1.CreateProjectRequest
	3,  // 9: hetty.proj.v1.ProjectService.OpenProject:input_type -> hetty.proj.v1.OpenProjectRequest
	5,  // 10: hetty.proj.v1.ProjectService.CloseProject:input_type -> hetty.proj.v1.CloseProjectRequest
	7,  // 11: hetty.proj.v1.ProjectService.DeleteProject:input_type -> hetty.proj.v1.DeleteProjectRequest
	9,  // 12: hetty.proj.v1.ProjectService.GetActiveProject:input_type -> hetty.proj.v1.GetActiveProjectRequest
	11, // 13: hetty.proj.v1.ProjectService.ListProjects:input_type -> hetty.proj.v1.ListProjectsRequest
	13, // 14: hetty.proj.v1.ProjectService.UpdateInterceptSettings:input_type -> hetty.proj.v1.UpdateInterceptSettingsRequest
	15, // 15: hetty.proj.v1.ProjectService.SetScopeRules:input_type -> hetty.proj.v1.SetScopeRulesRequest
	17, // 16: hetty.proj.v1.ProjectService.SetRequestLogsFilter:input_type -> hetty.proj.v1.SetRequestLogsFilterRequest
	2,  // 17: hetty.proj.v1.ProjectService.CreateProject:output_type -> hetty.proj.v1.CreateProjectResponse
	4,  // 18: hetty.proj.v1.ProjectService.OpenProject:output_type -> hetty.proj.v1.OpenProjectResponse
	6,  // 19: hetty.proj.v1.ProjectService.CloseProject:output_type -> hetty.proj.v1.CloseProjectResponse
	8,  // 20: hetty.proj.v1.ProjectService.DeleteProject:output_type -> hetty.proj.v1.DeleteProjectResponse
	10, // 21: hetty.proj.v1.ProjectService.GetActiveProject:output_type -> hetty.proj.v1.GetActiveProjectResponse
	12, // 22: hetty.proj.v1.ProjectService.ListProjects:output_type -> hetty.proj.v1.ListProjectsResponse
	14, // 23: hetty.proj.v1.ProjectService.UpdateInterceptSettings:output_type -> hetty.proj.v1.UpdateInterceptSettingsResponse
	16, // 24: hetty.proj.v1.ProjectService.SetScopeRules:output_type -> hetty.proj.v1.SetScopeRulesResponse
	18, // 25: hetty.proj.v1.ProjectService.SetRequestLogsFilter:output_type -> hetty.proj.v1.SetRequestLogsFilterResponse
	17, // [17:26] is the sub-list for method output_type
	8,  // [8:17] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proj_proj_proto_init() }
func file_proj_proj_proto_init() {
	if File_proj_proj_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proj_proj_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proj_proj_proto_goTypes,
		DependencyIndexes: file_proj_proj_proto_depIdxs,
		MessageInfos:      file_proj_proj_proto_msgTypes,
	}.Build()
	File_proj_proj_proto = out.File
	file_proj_proj_proto_rawDesc = nil
	file_proj_proj_proto_goTypes = nil
	file_proj_proj_proto_depIdxs = nil
}
