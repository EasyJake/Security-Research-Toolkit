// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proj/proj.proto

package proj

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "hetty.proj.v1.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceCreateProjectProcedure is the fully-qualified name of the ProjectService's
	// CreateProject RPC.
	ProjectServiceCreateProjectProcedure = "/hetty.proj.v1.ProjectService/CreateProject"
	// ProjectServiceOpenProjectProcedure is the fully-qualified name of the ProjectService's
	// OpenProject RPC.
	ProjectServiceOpenProjectProcedure = "/hetty.proj.v1.ProjectService/OpenProject"
	// ProjectServiceCloseProjectProcedure is the fully-qualified name of the ProjectService's
	// CloseProject RPC.
	ProjectServiceCloseProjectProcedure = "/hetty.proj.v1.ProjectService/CloseProject"
	// ProjectServiceDeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// DeleteProject RPC.
	ProjectServiceDeleteProjectProcedure = "/hetty.proj.v1.ProjectService/DeleteProject"
	// ProjectServiceGetActiveProjectProcedure is the fully-qualified name of the ProjectService's
	// GetActiveProject RPC.
	ProjectServiceGetActiveProjectProcedure = "/hetty.proj.v1.ProjectService/GetActiveProject"
	// ProjectServiceListProjectsProcedure is the fully-qualified name of the ProjectService's
	// ListProjects RPC.
	ProjectServiceListProjectsProcedure = "/hetty.proj.v1.ProjectService/ListProjects"
	// ProjectServiceUpdateInterceptSettingsProcedure is the fully-qualified name of the
	// ProjectService's UpdateInterceptSettings RPC.
	ProjectServiceUpdateInterceptSettingsProcedure = "/hetty.proj.v1.ProjectService/UpdateInterceptSettings"
	// ProjectServiceSetScopeRulesProcedure is the fully-qualified name of the ProjectService's
	// SetScopeRules RPC.
	ProjectServiceSetScopeRulesProcedure = "/hetty.proj.v1.ProjectService/SetScopeRules"
	// ProjectServiceSetRequestLogsFilterProcedure is the fully-qualified name of the ProjectService's
	// SetRequestLogsFilter RPC.
	ProjectServiceSetRequestLogsFilterProcedure = "/hetty.proj.v1.ProjectService/SetRequestLogsFilter"
)

// ProjectServiceClient is a client for the hetty.proj.v1.ProjectService service.
type ProjectServiceClient interface {
	CreateProject(context.Context, *connect.Request[CreateProjectRequest]) (*connect.Response[CreateProjectResponse], error)
	OpenProject(context.Context, *connect.Request[OpenProjectRequest]) (*connect.Response[OpenProjectResponse], error)
	CloseProject(context.Context, *connect.Request[CloseProjectRequest]) (*connect.Response[CloseProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[DeleteProjectRequest]) (*connect.Response[DeleteProjectResponse], error)
	GetActiveProject(context.Context, *connect.Request[GetActiveProjectRequest]) (*connect.Response[GetActiveProjectResponse], error)
	ListProjects(context.Context, *connect.Request[ListProjectsRequest]) (*connect.Response[ListProjectsResponse], error)
	UpdateInterceptSettings(context.Context, *connect.Request[UpdateInterceptSettingsRequest]) (*connect.Response[UpdateInterceptSettingsResponse], error)
	SetScopeRules(context.Context, *connect.Request[SetScopeRulesRequest]) (*connect.Response[SetScopeRulesResponse], error)
	SetRequestLogsFilter(context.Context, *connect.Request[SetRequestLogsFilterRequest]) (*connect.Response[SetRequestLogsFilterResponse], error)
}

// NewProjectServiceClient constructs a client for the hetty.proj.v1.ProjectService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	projectServiceMethods := File_proj_proj_proto.Services().ByName("ProjectService").Methods()
	return &projectServiceClient{
		createProject: connect.NewClient[CreateProjectRequest, CreateProjectResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
			connect.WithClientOptions(opts...),
		),
		openProject: connect.NewClient[OpenProjectRequest, OpenProjectResponse](
			httpClient,
			baseURL+ProjectServiceOpenProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("OpenProject")),
			connect.WithClientOptions(opts...),
		),
		closeProject: connect.NewClient[CloseProjectRequest, CloseProjectResponse](
			httpClient,
			baseURL+ProjectServiceCloseProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CloseProject")),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[DeleteProjectRequest, DeleteProjectResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
			connect.WithClientOptions(opts...),
		),
		getActiveProject: connect.NewClient[GetActiveProjectRequest, GetActiveProjectResponse](
			httpClient,
			baseURL+ProjectServiceGetActiveProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetActiveProject")),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[ListProjectsRequest, ListProjectsResponse](
			httpClient,
			baseURL+ProjectServiceListProjectsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProjects")),
			connect.WithClientOptions(opts...),
		),
		updateInterceptSettings: connect.NewClient[UpdateInterceptSettingsRequest, UpdateInterceptSettingsResponse](
			httpClient,
			baseURL+ProjectServiceUpdateInterceptSettingsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateInterceptSettings")),
			connect.WithClientOptions(opts...),
		),
		setScopeRules: connect.NewClient[SetScopeRulesRequest, SetScopeRulesResponse](
			httpClient,
			baseURL+ProjectServiceSetScopeRulesProcedure,
			connect.WithSchema(projectServiceMethods.ByName("SetScopeRules")),
			connect.WithClientOptions(opts...),
		),
		setRequestLogsFilter: connect.NewClient[SetRequestLogsFilterRequest, SetRequestLogsFilterResponse](
			httpClient,
			baseURL+ProjectServiceSetRequestLogsFilterProcedure,
			connect.WithSchema(projectServiceMethods.ByName("SetRequestLogsFilter")),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	createProject           *connect.Client[CreateProjectRequest, CreateProjectResponse]
	openProject             *connect.Client[OpenProjectRequest, OpenProjectResponse]
	closeProject            *connect.Client[CloseProjectRequest, CloseProjectResponse]
	deleteProject           *connect.Client[DeleteProjectRequest, DeleteProjectResponse]
	getActiveProject        *connect.Client[GetActiveProjectRequest, GetActiveProjectResponse]
	listProjects            *connect.Client[ListProjectsRequest, ListProjectsResponse]
	updateInterceptSettings *connect.Client[UpdateInterceptSettingsRequest, UpdateInterceptSettingsResponse]
	setScopeRules           *connect.Client[SetScopeRulesRequest, SetScopeRulesResponse]
	setRequestLogsFilter    *connect.Client[SetRequestLogsFilterRequest, SetRequestLogsFilterResponse]
}

// CreateProject calls hetty.proj.v1.ProjectService.CreateProject.
func (c *projectServiceClient) CreateProject(ctx context.Context, req *connect.Request[CreateProjectRequest]) (*connect.Response[CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// OpenProject calls hetty.proj.v1.ProjectService.OpenProject.
func (c *projectServiceClient) OpenProject(ctx context.Context, req *connect.Request[OpenProjectRequest]) (*connect.Response[OpenProjectResponse], error) {
	return c.openProject.CallUnary(ctx, req)
}

// CloseProject calls hetty.proj.v1.ProjectService.CloseProject.
func (c *projectServiceClient) CloseProject(ctx context.Context, req *connect.Request[CloseProjectRequest]) (*connect.Response[CloseProjectResponse], error) {
	return c.closeProject.CallUnary(ctx, req)
}

// DeleteProject calls hetty.proj.v1.ProjectService.DeleteProject.
func (c *projectServiceClient) DeleteProject(ctx context.Context, req *connect.Request[DeleteProjectRequest]) (*connect.Response[DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetActiveProject calls hetty.proj.v1.ProjectService.GetActiveProject.
func (c *projectServiceClient) GetActiveProject(ctx context.Context, req *connect.Request[GetActiveProjectRequest]) (*connect.Response[GetActiveProjectResponse], error) {
	return c.getActiveProject.CallUnary(ctx, req)
}

// ListProjects calls hetty.proj.v1.ProjectService.ListProjects.
func (c *projectServiceClient) ListProjects(ctx context.Context, req *connect.Request[ListProjectsRequest]) (*connect.Response[ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// UpdateInterceptSettings calls hetty.proj.v1.ProjectService.UpdateInterceptSettings.
func (c *projectServiceClient) UpdateInterceptSettings(ctx context.Context, req *connect.Request[UpdateInterceptSettingsRequest]) (*connect.Response[UpdateInterceptSettingsResponse], error) {
	return c.updateInterceptSettings.CallUnary(ctx, req)
}

// SetScopeRules calls hetty.proj.v1.ProjectService.SetScopeRules.
func (c *projectServiceClient) SetScopeRules(ctx context.Context, req *connect.Request[SetScopeRulesRequest]) (*connect.Response[SetScopeRulesResponse], error) {
	return c.setScopeRules.CallUnary(ctx, req)
}

// SetRequestLogsFilter calls hetty.proj.v1.ProjectService.SetRequestLogsFilter.
func (c *projectServiceClient) SetRequestLogsFilter(ctx context.Context, req *connect.Request[SetRequestLogsFilterRequest]) (*connect.Response[SetRequestLogsFilterResponse], error) {
	return c.setRequestLogsFilter.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the hetty.proj.v1.ProjectService service.
type ProjectServiceHandler interface {
	CreateProject(context.Context, *connect.Request[CreateProjectRequest]) (*connect.Response[CreateProjectResponse], error)
	OpenProject(context.Context, *connect.Request[OpenProjectRequest]) (*connect.Response[OpenProjectResponse], error)
	CloseProject(context.Context, *connect.Request[CloseProjectRequest]) (*connect.Response[CloseProjectResponse], error)
	DeleteProject(context.Context, *connect.Request[DeleteProjectRequest]) (*connect.Response[DeleteProjectResponse], error)
	GetActiveProject(context.Context, *connect.Request[GetActiveProjectRequest]) (*connect.Response[GetActiveProjectResponse], error)
	ListProjects(context.Context, *connect.Request[ListProjectsRequest]) (*connect.Response[ListProjectsResponse], error)
	UpdateInterceptSettings(context.Context, *connect.Request[UpdateInterceptSettingsRequest]) (*connect.Response[UpdateInterceptSettingsResponse], error)
	SetScopeRules(context.Context, *connect.Request[SetScopeRulesRequest]) (*connect.Response[SetScopeRulesResponse], error)
	SetRequestLogsFilter(context.Context, *connect.Request[SetRequestLogsFilterRequest]) (*connect.Response[SetRequestLogsFilterResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectServiceMethods := File_proj_proj_proto.Services().ByName("ProjectService").Methods()
	projectServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceOpenProjectHandler := connect.NewUnaryHandler(
		ProjectServiceOpenProjectProcedure,
		svc.OpenProject,
		connect.WithSchema(projectServiceMethods.ByName("OpenProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCloseProjectHandler := connect.NewUnaryHandler(
		ProjectServiceCloseProjectProcedure,
		svc.CloseProject,
		connect.WithSchema(projectServiceMethods.ByName("CloseProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetActiveProjectHandler := connect.NewUnaryHandler(
		ProjectServiceGetActiveProjectProcedure,
		svc.GetActiveProject,
		connect.WithSchema(projectServiceMethods.ByName("GetActiveProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectsHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(projectServiceMethods.ByName("ListProjects")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateInterceptSettingsHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateInterceptSettingsProcedure,
		svc.UpdateInterceptSettings,
		connect.WithSchema(projectServiceMethods.ByName("UpdateInterceptSettings")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceSetScopeRulesHandler := connect.NewUnaryHandler(
		ProjectServiceSetScopeRulesProcedure,
		svc.SetScopeRules,
		connect.WithSchema(projectServiceMethods.ByName("SetScopeRules")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceSetRequestLogsFilterHandler := connect.NewUnaryHandler(
		ProjectServiceSetRequestLogsFilterProcedure,
		svc.SetRequestLogsFilter,
		connect.WithSchema(projectServiceMethods.ByName("SetRequestLogsFilter")),
		connect.WithHandlerOptions(opts...),
	)
	return "/hetty.proj.v1.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceCreateProjectProcedure:
			projectServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceOpenProjectProcedure:
			projectServiceOpenProjectHandler.ServeHTTP(w, r)
		case ProjectServiceCloseProjectProcedure:
			projectServiceCloseProjectHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectProcedure:
			projectServiceDeleteProjectHandler.ServeHTTP(w, r)
		case ProjectServiceGetActiveProjectProcedure:
			projectServiceGetActiveProjectHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectsProcedure:
			projectServiceListProjectsHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateInterceptSettingsProcedure:
			projectServiceUpdateInterceptSettingsHandler.ServeHTTP(w, r)
		case ProjectServiceSetScopeRulesProcedure:
			projectServiceSetScopeRulesHandler.ServeHTTP(w, r)
		case ProjectServiceSetRequestLogsFilterProcedure:
			projectServiceSetRequestLogsFilterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) CreateProject(context.Context, *connect.Request[CreateProjectRequest]) (*connect.Response[CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.CreateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) OpenProject(context.Context, *connect.Request[OpenProjectRequest]) (*connect.Response[OpenProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.OpenProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) CloseProject(context.Context, *connect.Request[CloseProjectRequest]) (*connect.Response[CloseProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.CloseProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProject(context.Context, *connect.Request[DeleteProjectRequest]) (*connect.Response[DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.DeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetActiveProject(context.Context, *connect.Request[GetActiveProjectRequest]) (*connect.Response[GetActiveProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.GetActiveProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjects(context.Context, *connect.Request[ListProjectsRequest]) (*connect.Response[ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.ListProjects is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateInterceptSettings(context.Context, *connect.Request[UpdateInterceptSettingsRequest]) (*connect.Response[UpdateInterceptSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.UpdateInterceptSettings is not implemented"))
}

func (UnimplementedProjectServiceHandler) SetScopeRules(context.Context, *connect.Request[SetScopeRulesRequest]) (*connect.Response[SetScopeRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.SetScopeRules is not implemented"))
}

func (UnimplementedProjectServiceHandler) SetRequestLogsFilter(context.Context, *connect.Request[SetRequestLogsFilterRequest]) (*connect.Response[SetRequestLogsFilterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("hetty.proj.v1.ProjectService.SetRequestLogsFilter is not implemented"))
}
